
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000958  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000958  000009ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  00800062  00800062  000009ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000a60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001089  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069a  00000000  00000000  00001b71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fd0  00000000  00000000  0000220b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000031dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000641  00000000  00000000  000032ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ec0  00000000  00000000  000038ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000047ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
   2:	97 c0       	rjmp	.+302    	; 0x132 <__vector_1>
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
   6:	68 c0       	rjmp	.+208    	; 0xd8 <__bad_interrupt>
   8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
   a:	66 c0       	rjmp	.+204    	; 0xd8 <__bad_interrupt>
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
   e:	64 c0       	rjmp	.+200    	; 0xd8 <__bad_interrupt>
  10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
  12:	62 c0       	rjmp	.+196    	; 0xd8 <__bad_interrupt>
  14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
  16:	60 c0       	rjmp	.+192    	; 0xd8 <__bad_interrupt>
  18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
  1a:	5e c0       	rjmp	.+188    	; 0xd8 <__bad_interrupt>
  1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>

0000001e <__trampolines_end>:
  1e:	05 01       	movw	r0, r10
  20:	09 06       	cpc	r0, r25
  22:	a1 01       	movw	r20, r2
  24:	05 07       	cpc	r16, r21
  26:	19 e0       	ldi	r17, 0x09	; 9
  28:	29 e7       	ldi	r18, 0x79	; 121
  2a:	15 00       	.word	0x0015	; ????
  2c:	25 01       	movw	r4, r10
  2e:	75 01       	movw	r14, r10
  30:	95 08       	sbc	r9, r5
  32:	81 02       	muls	r24, r17
  34:	95 01       	movw	r18, r10
  36:	75 08       	sbc	r7, r5
  38:	25 65       	ori	r18, 0x55	; 85
  3a:	19 00       	.word	0x0019	; ????
  3c:	29 65       	ori	r18, 0x59	; 89
  3e:	81 00       	.word	0x0081	; ????
  40:	c0 09       	Address 0x00000040 is out of bounds.
.word	0xffff	; ????

00000041 <usbDescriptorConfiguration>:
  41:	09 02 22 00 01 01 00 80 19 09 04 00 00 01 03 00     ..".............
  51:	00 00 09 21 01 01 00 01 22 23 00 07 05 81 03 08     ...!...."#......
  61:	00 0a                                               ..

00000063 <usbDescriptorDevice>:
  63:	12 01 10 01 00 00 00 08 42 42 31 e1 00 01 01 02     ........BB1.....
  73:	00 01                                               ..

00000075 <usbDescriptorStringDevice>:
  75:	16 03 45 00 61 00 73 00 79 00 4c 00 6f 00 67 00     ..E.a.s.y.L.o.g.
  85:	67 00 65 00 72 00                                   g.e.r.

0000008b <usbDescriptorStringVendor>:
  8b:	12 03 6f 00 62 00 64 00 65 00 76 00 2e 00 61 00     ..o.b.d.e.v...a.
  9b:	74 00                                               t.

0000009d <usbDescriptorString0>:
  9d:	04 03 09 04 00                                      .....

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf e5       	ldi	r28, 0x5F	; 95
  a8:	d1 e0       	ldi	r29, 0x01	; 1
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
  ae:	10 e0       	ldi	r17, 0x00	; 0
  b0:	a0 e6       	ldi	r26, 0x60	; 96
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	e8 e5       	ldi	r30, 0x58	; 88
  b6:	f9 e0       	ldi	r31, 0x09	; 9
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x10>
  ba:	05 90       	lpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a2 36       	cpi	r26, 0x62	; 98
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0xc>

000000c4 <__do_clear_bss>:
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	a2 e6       	ldi	r26, 0x62	; 98
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a3 3b       	cpi	r26, 0xB3	; 179
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	e8 d1       	rcall	.+976    	; 0x4a6 <main>
  d6:	3e c4       	rjmp	.+2172   	; 0x954 <_exit>

000000d8 <__bad_interrupt>:
  d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
  da:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
  dc:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
  de:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
  e2:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
  e4:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
  e6:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
  e8:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
  ea:	09 c0       	rjmp	.+18     	; 0xfe <usbCrcLoopEntry>

000000ec <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
  ec:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
  ee:	82 27       	eor	r24, r18

000000f0 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
  f0:	97 95       	ror	r25
    ror     resCrcL
  f2:	87 95       	ror	r24
    brcs    usbCrcNoXor
  f4:	10 f0       	brcs	.+4      	; 0xfa <usbCrcNoXor>
    eor     resCrcL, polyL
  f6:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
  f8:	95 27       	eor	r25, r21

000000fa <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
  fa:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
  fc:	c8 f3       	brcs	.-14     	; 0xf0 <usbCrcBitLoop>

000000fe <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
  fe:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 100:	a8 f3       	brcs	.-22     	; 0xec <usbCrcByteLoop>

00000102 <usbCrcReady>:
usbCrcReady:
    ret
 102:	08 95       	ret

00000104 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 104:	ea df       	rcall	.-44     	; 0xda <usbCrc16>
    st      ptr+, resCrcL
 106:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 108:	9d 93       	st	X+, r25
    ret
 10a:	08 95       	ret

0000010c <usbMeasureFrameLength>:

; extern unsigned usbMeasurePacketLength(void);
; returns time between two idle strobes in multiples of 7 CPU clocks
.global usbMeasureFrameLength
usbMeasureFrameLength:
    ldi     cntH, 6         ; wait ~ 10 ms for D- == 0
 10c:	a6 e0       	ldi	r26, 0x06	; 6
    clr     cnt16L
 10e:	88 27       	eor	r24, r24
    clr     cnt16H
 110:	99 27       	eor	r25, r25

00000112 <usbMFTime16>:
usbMFTime16:
    dec     cntH
 112:	aa 95       	dec	r26
    breq    usbMFTimeout
 114:	69 f0       	breq	.+26     	; 0x130 <usbMFTimeout>

00000116 <usbMFWaitStrobe>:
usbMFWaitStrobe:            ; first wait for D- == 0 (idle strobe)
    sbiw    cnt16, 1        ;[0] [6]
 116:	01 97       	sbiw	r24, 0x01	; 1
    breq    usbMFTime16     ;[2]
 118:	e1 f3       	breq	.-8      	; 0x112 <usbMFTime16>
    sbic    USBIN, USBMINUS ;[3]
 11a:	b0 99       	sbic	0x16, 0	; 22
    rjmp    usbMFWaitStrobe ;[4]
 11c:	fc cf       	rjmp	.-8      	; 0x116 <usbMFWaitStrobe>

0000011e <usbMFWaitIdle>:
usbMFWaitIdle:              ; then wait until idle again
    sbis    USBIN, USBMINUS ;1 wait for D- == 1
 11e:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    usbMFWaitIdle   ;2
 120:	fe cf       	rjmp	.-4      	; 0x11e <usbMFWaitIdle>
    ldi     cnt16L, 1       ;1 represents cycles so far
 122:	81 e0       	ldi	r24, 0x01	; 1
    clr     cnt16H          ;1
 124:	99 27       	eor	r25, r25

00000126 <usbMFWaitLoop>:
usbMFWaitLoop:
    in      cntH, USBIN     ;[0] [7]
 126:	a6 b3       	in	r26, 0x16	; 22
    adiw    cnt16, 1        ;[1]
 128:	01 96       	adiw	r24, 0x01	; 1
    breq    usbMFTimeout    ;[3]
 12a:	11 f0       	breq	.+4      	; 0x130 <usbMFTimeout>
    andi    cntH, USBMASK   ;[4]
 12c:	a5 70       	andi	r26, 0x05	; 5
    brne    usbMFWaitLoop   ;[5]
 12e:	d9 f7       	brne	.-10     	; 0x126 <usbMFWaitLoop>

00000130 <usbMFTimeout>:
usbMFTimeout:
#if resL != cnt16L
    mov     resL, cnt16L
    mov     resH, cnt16H
#endif
    ret
 130:	08 95       	ret

00000132 <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 132:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 134:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 136:	cf 93       	push	r28

00000138 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 138:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 13a:	b0 9b       	sbis	0x16, 0	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
 13c:	e9 f7       	brne	.-6      	; 0x138 <waitForJ>

0000013e <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 13e:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 140:	09 c0       	rjmp	.+18     	; 0x154 <foundK>
    sbis    USBIN, USBMINUS
 142:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 144:	07 c0       	rjmp	.+14     	; 0x154 <foundK>
    sbis    USBIN, USBMINUS
 146:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 148:	05 c0       	rjmp	.+10     	; 0x154 <foundK>
    sbis    USBIN, USBMINUS
 14a:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 14c:	03 c0       	rjmp	.+6      	; 0x154 <foundK>
    sbis    USBIN, USBMINUS
 14e:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 150:	01 c0       	rjmp	.+2      	; 0x154 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 152:	a3 c0       	rjmp	.+326    	; 0x29a <sofError>

00000154 <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 154:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 156:	c0 91 96 00 	lds	r28, 0x0096	; 0x800096 <usbInputBufOffset>
    clr     YH                  ;1 [5]
 15a:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 15c:	c3 56       	subi	r28, 0x63	; 99
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 15e:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 160:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    haveTwoBitsK    ;2 [10]
 162:	02 c0       	rjmp	.+4      	; 0x168 <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 164:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 166:	eb cf       	rjmp	.-42     	; 0x13e <waitForK>

00000168 <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 168:	2f 93       	push	r18
    push    x1              ;2 [12]
 16a:	0f 93       	push	r16
    push    x2              ;2 [14]
 16c:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 16e:	06 b3       	in	r16, 0x16	; 22
    ldi     shift, 0xff     ;1 [18]
 170:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 172:	00 fb       	bst	r16, 0
    bld     shift, 0        ;1 [20]
 174:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 176:	4f 93       	push	r20
    push    cnt             ;2 [24]
 178:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 17a:	16 b3       	in	r17, 0x16	; 22
    ser     x3              ;1 [26] [inserted init instruction]
 17c:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 17e:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 180:	00 fb       	bst	r16, 0
    bld     shift, 1        ;1 [29]
 182:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 184:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 186:	31 c0       	rjmp	.+98     	; 0x1ea <rxbit2>

00000188 <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 188:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 18a:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 18c:	16 b3       	in	r17, 0x16	; 22
    ori     shift, 0x01 ;1 [18]
 18e:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 190:	28 c0       	rjmp	.+80     	; 0x1e2 <didUnstuff0>

00000192 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 192:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 194:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 196:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 198:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 19a:	06 b3       	in	r16, 0x16	; 22
    rjmp    didUnstuff1 ;2 [27]
 19c:	29 c0       	rjmp	.+82     	; 0x1f0 <didUnstuff1>

0000019e <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 19e:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 1a0:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 1a2:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 1a4:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 1a6:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff2 ;2 [35]
 1a8:	2b c0       	rjmp	.+86     	; 0x200 <didUnstuff2>

000001aa <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 1aa:	16 b3       	in	r17, 0x16	; 22
    andi    x3, ~0x08   ;1 [35]
 1ac:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 1ae:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 1b0:	2a c0       	rjmp	.+84     	; 0x206 <didUnstuff3>

000001b2 <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 1b2:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 1b4:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10 ;1 [42]
 1b6:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 1b8:	2c c0       	rjmp	.+88     	; 0x212 <didUnstuff4>

000001ba <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 1ba:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 1bc:	16 b3       	in	r17, 0x16	; 22
    ori     shift, 0x20 ;1 [50]
 1be:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 1c0:	2f c0       	rjmp	.+94     	; 0x220 <didUnstuff5>

000001c2 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 1c2:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 1c4:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40 ;1 [58]
 1c6:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 1c8:	32 c0       	rjmp	.+100    	; 0x22e <didUnstuff6>

000001ca <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 1ca:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 1cc:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3      ;2 [3] store data
 1ce:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 1d0:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 1d2:	00 00       	nop
    eor     x2, x1      ;1 [6]
 1d4:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 1d6:	10 fb       	bst	r17, 0
    bld     shift, 0    ;1 [8]
 1d8:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 1da:	16 b3       	in	r17, 0x16	; 22
    andi    x2, USBMASK ;1 [10]
 1dc:	15 70       	andi	r17, 0x05	; 5
    breq    se0         ;1 [11] SE0 check for bit 1
 1de:	c9 f1       	breq	.+114    	; 0x252 <se0>
    andi    shift, 0xf9 ;1 [12]
 1e0:	29 7f       	andi	r18, 0xF9	; 249

000001e2 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 1e2:	91 f2       	breq	.-92     	; 0x188 <unstuff0>
    eor     x1, x2      ;1 [14]
 1e4:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 1e6:	00 fb       	bst	r16, 0
    bld     shift, 1    ;1 [16]
 1e8:	21 f9       	bld	r18, 1

000001ea <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 1ea:	06 b3       	in	r16, 0x16	; 22
    andi    shift, 0xf3 ;1 [18]
 1ec:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 1ee:	89 f2       	breq	.-94     	; 0x192 <unstuff1>

000001f0 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 1f0:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 1f2:	58 f1       	brcs	.+86     	; 0x24a <overflow>
    eor     x2, x1      ;1 [22]
 1f4:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 1f6:	10 fb       	bst	r17, 0
    bld     shift, 2    ;1 [24]
 1f8:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 1fa:	16 b3       	in	r17, 0x16	; 22
    andi    shift, 0xe7 ;1 [26]
 1fc:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 1fe:	79 f2       	breq	.-98     	; 0x19e <unstuff2>

00000200 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 200:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 202:	00 fb       	bst	r16, 0
    bld     shift, 3    ;1 [30]
 204:	23 f9       	bld	r18, 3

00000206 <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 206:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 208:	81 f2       	breq	.-96     	; 0x1aa <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 20a:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1      ;1 [34]
 20c:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 20e:	10 fb       	bst	r17, 0
    bld     shift, 4    ;1 [36]
 210:	24 f9       	bld	r18, 4

00000212 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 212:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 214:	71 f2       	breq	.-100    	; 0x1b2 <unstuff4>
    nop2                ;2 [40]
 216:	00 c0       	rjmp	.+0      	; 0x218 <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 218:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2      ;1 [42]
 21a:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 21c:	00 fb       	bst	r16, 0
    bld     shift, 5    ;1 [44]
 21e:	25 f9       	bld	r18, 5

00000220 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 220:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 222:	59 f2       	breq	.-106    	; 0x1ba <unstuff5>
    nop2                ;2 [48]
 224:	00 c0       	rjmp	.+0      	; 0x226 <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 226:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1      ;1 [50]
 228:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 22a:	10 fb       	bst	r17, 0
    bld     shift, 6    ;1 [52]
 22c:	26 f9       	bld	r18, 6

0000022e <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 22e:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 230:	40 f2       	brcs	.-112    	; 0x1c2 <unstuff6>
    nop2                ;2 [56]
 232:	00 c0       	rjmp	.+0      	; 0x234 <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 234:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2      ;1 [58]
 236:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 238:	00 fb       	bst	r16, 0
    bld     shift, 7    ;1 [60]
 23a:	27 f9       	bld	r18, 7

0000023c <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 23c:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 23e:	28 f6       	brcc	.-118    	; 0x1ca <rxLoop>

00000240 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 240:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 242:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 244:	16 b3       	in	r17, 0x16	; 22
    nop                 ;1 [66]
 246:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 248:	f9 cf       	rjmp	.-14     	; 0x23c <didUnstuff7>

0000024a <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 24a:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 24c:	1a bf       	out	0x3a, r17	; 58

0000024e <ignorePacket>:
ignorePacket:
    clr     token
 24e:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 250:	19 c0       	rjmp	.+50     	; 0x284 <handleSetupOrOut>

00000252 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 252:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 254:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 256:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 258:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 25a:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 25c:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 25e:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 260:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 262:	f9 f0       	breq	.+62     	; 0x2a2 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 264:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 266:	e9 f0       	breq	.+58     	; 0x2a2 <handleData>
    lds     shift, usbDeviceAddr;[17]
 268:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 26c:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 26e:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 270:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 272:	ed cf       	rjmp	.-38     	; 0x24e <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 274:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 276:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 278:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 27a:	41 f1       	breq	.+80     	; 0x2cc <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 27c:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 27e:	11 f0       	breq	.+4      	; 0x284 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 280:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 282:	29 f7       	brne	.-54     	; 0x24e <ignorePacket>

00000284 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 284:	00 93 9b 00 	sts	0x009B, r16	; 0x80009b <usbCurrentTok>

00000288 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 288:	3f 91       	pop	r19
 28a:	4f 91       	pop	r20
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	2f 91       	pop	r18
 292:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 294:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 296:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 298:	4f cf       	rjmp	.-354    	; 0x138 <waitForJ>

0000029a <sofError>:
sofError:
    POP_RETI                    ;macro call
 29a:	cf 91       	pop	r28
 29c:	cf bf       	out	0x3f, r28	; 63
 29e:	cf 91       	pop	r28
    reti
 2a0:	18 95       	reti

000002a2 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 2a2:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <usbCurrentTok>
    tst     shift               ;[20]
 2a6:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 2a8:	79 f3       	breq	.-34     	; 0x288 <doReturn>
    lds     x2, usbRxLen        ;[22]
 2aa:	10 91 99 00 	lds	r17, 0x0099	; 0x800099 <usbRxLen>
    tst     x2                  ;[24]
 2ae:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 2b0:	69 f5       	brne	.+90     	; 0x30c <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 2b2:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 2b4:	6a f1       	brmi	.+90     	; 0x310 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 2b6:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <usbRxLen>
    sts     usbRxToken, shift   ;[30]
 2ba:	20 93 95 00 	sts	0x0095, r18	; 0x800095 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
 2be:	10 91 96 00 	lds	r17, 0x0096	; 0x800096 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
 2c2:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 2c4:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 2c6:	30 93 96 00 	sts	0x0096, r19	; 0x800096 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 2ca:	22 c0       	rjmp	.+68     	; 0x310 <sendAckAndReti>

000002cc <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 2cc:	00 91 99 00 	lds	r16, 0x0099	; 0x800099 <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 2d0:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 2d2:	e4 f4       	brge	.+56     	; 0x30c <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 2d4:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 2d6:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 2d8:	49 f4       	brne	.+18     	; 0x2ec <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 2da:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 2de:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 2e0:	19 c0       	rjmp	.+50     	; 0x314 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 2e2:	00 93 61 00 	sts	0x0061, r16	; 0x800061 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
 2e6:	cd e7       	ldi	r28, 0x7D	; 125
    ldi     YH, hi8(usbTxBuf)   ;[44]
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 2ea:	18 c0       	rjmp	.+48     	; 0x31c <usbSendAndReti>

000002ec <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 2ec:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 2f0:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 2f2:	10 c0       	rjmp	.+32     	; 0x314 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 2f4:	00 93 88 00 	sts	0x0088, r16	; 0x800088 <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 2f8:	c9 e8       	ldi	r28, 0x89	; 137
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 2fa:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 2fc:	0f c0       	rjmp	.+30     	; 0x31c <usbSendAndReti>

000002fe <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 2fe:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 300:	a8 f4       	brcc	.+42     	; 0x32c <doExorN1>
    subi    x4, 1               ;[-3]
 302:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 304:	a9 f4       	brne	.+42     	; 0x330 <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 306:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 308:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 30a:	f9 cf       	rjmp	.-14     	; 0x2fe <stuffN1Delay>

0000030c <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 30c:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 30e:	03 c0       	rjmp	.+6      	; 0x316 <usbSendX3>

00000310 <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 310:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 312:	01 c0       	rjmp	.+2      	; 0x316 <usbSendX3>

00000314 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 314:	43 2f       	mov	r20, r19

00000316 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 316:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 318:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 31a:	32 e0       	ldi	r19, 0x02	; 2

0000031c <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 31c:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK         ;[-11]
 31e:	15 60       	ori	r17, 0x05	; 5
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 320:	c0 9a       	sbi	0x18, 0	; 24
    out     USBDDR, x2          ;[-8] <--- acquire bus
 322:	17 bb       	out	0x17, r17	; 23
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 324:	08 b3       	in	r16, 0x18	; 24
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 326:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 328:	15 e0       	ldi	r17, 0x05	; 5
    push    x4                  ;[-4]
 32a:	5f 93       	push	r21

0000032c <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 32c:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 32e:	56 e0       	ldi	r21, 0x06	; 6

00000330 <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 330:	08 bb       	out	0x18, r16	; 24
    ror     shift               ;[01]
 332:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 334:	20 f4       	brcc	.+8      	; 0x33e <doExorN2>
    subi    x4, 1               ;[03]
 336:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 338:	21 f4       	brne	.+8      	; 0x342 <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 33a:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 33c:	f9 cf       	rjmp	.-14     	; 0x330 <commonN1>

0000033e <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 33e:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 340:	56 e0       	ldi	r21, 0x06	; 6

00000342 <commonN2>:
commonN2:
    nop                         ;[06] [14]
 342:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 344:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 346:	08 bb       	out	0x18, r16	; 24
    brcs    txBitloop           ;[09]      [25] [41]
 348:	d0 f2       	brcs	.-76     	; 0x2fe <stuffN1Delay>

0000034a <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 34a:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 34c:	28 f4       	brcc	.+10     	; 0x358 <doExor6>
    subi    x4, 1               ;[44]
 34e:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 350:	29 f4       	brne	.+10     	; 0x35c <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 352:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 354:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 356:	f9 cf       	rjmp	.-14     	; 0x34a <stuff6Delay>

00000358 <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 358:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 35a:	56 e0       	ldi	r21, 0x06	; 6

0000035c <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 35c:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 35e:	08 bb       	out	0x18, r16	; 24
    brcc    doExor7             ;[49]
 360:	20 f4       	brcc	.+8      	; 0x36a <doExor7>
    subi    x4, 1               ;[50]
 362:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 364:	21 f4       	brne	.+8      	; 0x36e <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 366:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 368:	f9 cf       	rjmp	.-14     	; 0x35c <common6>

0000036a <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 36a:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 36c:	56 e0       	ldi	r21, 0x06	; 6

0000036e <common7>:
common7:
    ld      shift, y+           ;[53]
 36e:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 370:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 372:	08 bb       	out	0x18, r16	; 24
    brne    txByteLoop          ;[57]
 374:	21 f6       	brne	.-120    	; 0x2fe <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 376:	0a 7f       	andi	r16, 0xFA	; 250
    lds     x2, usbNewDeviceAddr;[59]
 378:	10 91 9a 00 	lds	r17, 0x009A	; 0x80009a <usbNewDeviceAddr>
    lsl     x2                  ;[61] we compare with left shifted address
 37c:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 37e:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 380:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 382:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 384:	11 f0       	breq	.+4      	; 0x38a <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 386:	10 93 94 00 	sts	0x0094, r17	; 0x800094 <usbDeviceAddr>

0000038a <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 38a:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
 38c:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
 38e:	01 60       	ori	r16, 0x01	; 1
    in      x2, USBDDR          ;[06]
 390:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK         ;[07] set both pins to input
 392:	1a 7f       	andi	r17, 0xFA	; 250
    mov     x3, x1              ;[08]
 394:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 396:	4a 7f       	andi	r20, 0xFA	; 250
    pop     x4                  ;[10]
 398:	5f 91       	pop	r21
    nop2                        ;[12]
 39a:	00 c0       	rjmp	.+0      	; 0x39c <skipAddrAssign+0x12>
    nop2                        ;[14]
 39c:	00 c0       	rjmp	.+0      	; 0x39e <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 39e:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2          ;[17] <-- release bus now
 3a0:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 3a2:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
 3a4:	71 cf       	rjmp	.-286    	; 0x288 <doReturn>

000003a6 <buildReport>:

static void buildReport(void)
{
uchar   key = 0;

    if(nextDigit != NULL){
 3a6:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <nextDigit>
 3aa:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <nextDigit+0x1>
 3ae:	30 97       	sbiw	r30, 0x00	; 0
 3b0:	11 f0       	breq	.+4      	; 0x3b6 <buildReport+0x10>
        key = *nextDigit;
 3b2:	80 81       	ld	r24, Z
 3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <buildReport+0x12>

/* ------------------------------------------------------------------------- */

static void buildReport(void)
{
uchar   key = 0;
 3b6:	80 e0       	ldi	r24, 0x00	; 0

    if(nextDigit != NULL){
        key = *nextDigit;
    }
    reportBuffer[0] = 0;    /* no modifiers */
 3b8:	e9 e7       	ldi	r30, 0x79	; 121
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	10 82       	st	Z, r1
    reportBuffer[1] = key;
 3be:	81 83       	std	Z+1, r24	; 0x01
 3c0:	08 95       	ret

000003c2 <usbFunctionSetup>:
/* ------------------------------------------------------------------------- */
/* ------------------------ interface to USB driver ------------------------ */
/* ------------------------------------------------------------------------- */

uchar	usbFunctionSetup(uchar data[8])
{
 3c2:	fc 01       	movw	r30, r24
usbRequest_t    *rq = (void *)data;

    usbMsgPtr = reportBuffer;
 3c4:	89 e7       	ldi	r24, 0x79	; 121
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <usbMsgPtr+0x1>
 3cc:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <usbMsgPtr>
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 3d0:	90 81       	ld	r25, Z
 3d2:	90 76       	andi	r25, 0x60	; 96
 3d4:	90 32       	cpi	r25, 0x20	; 32
 3d6:	b9 f4       	brne	.+46     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
 3d8:	81 81       	ldd	r24, Z+1	; 0x01
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	19 f4       	brne	.+6      	; 0x3e4 <usbFunctionSetup+0x22>
            /* we only have one report type, so don't look at wValue */
            buildReport();
 3de:	e3 df       	rcall	.-58     	; 0x3a6 <buildReport>
            return sizeof(reportBuffer);
 3e0:	82 e0       	ldi	r24, 0x02	; 2
 3e2:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
 3e4:	82 30       	cpi	r24, 0x02	; 2
 3e6:	41 f4       	brne	.+16     	; 0x3f8 <usbFunctionSetup+0x36>
            usbMsgPtr = &idleRate;
 3e8:	88 e7       	ldi	r24, 0x78	; 120
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <usbMsgPtr+0x1>
 3f0:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <usbMsgPtr>
            return 1;
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
 3f8:	8a 30       	cpi	r24, 0x0A	; 10
 3fa:	39 f4       	brne	.+14     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
            idleRate = rq->wValue.bytes[1];
 3fc:	83 81       	ldd	r24, Z+3	; 0x03
 3fe:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <idleRate>
        }
    }else{
        /* no vendor specific requests implemented */
    }
	return 0;
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	08 95       	ret
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	08 95       	ret
 40a:	80 e0       	ldi	r24, 0x00	; 0
}
 40c:	08 95       	ret

0000040e <usbEventResetReady>:
ATTiny25, ATTiny45, ATTiny85), it may be useful to search for the optimum in
both regions.
*/

void    usbEventResetReady(void)
{
 40e:	df 92       	push	r13
 410:	ef 92       	push	r14
 412:	ff 92       	push	r15
 414:	0f 93       	push	r16
 416:	1f 93       	push	r17
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
    /* Disable interrupts during oscillator calibration since
     * usbMeasureFrameLength() counts CPU cycles.
     */
    cli();
 41c:	f8 94       	cli
 41e:	68 94       	set
 420:	ee 24       	eor	r14, r14
 422:	e3 f8       	bld	r14, 3
 424:	f1 2c       	mov	r15, r1
 * experimental purposes only!
 */
static void calibrateOscillator(void)
{
uchar       step = 128;
uchar       trialValue = 0, optimumValue;
 426:	d1 2c       	mov	r13, r1
 * the 12 MHz clock! Use the RC oscillator calibrated to 12 MHz for
 * experimental purposes only!
 */
static void calibrateOscillator(void)
{
uchar       step = 128;
 428:	10 e8       	ldi	r17, 0x80	; 128
uchar       trialValue = 0, optimumValue;
int         x, optimumDev, targetValue = (unsigned)(1499 * (double)F_CPU / 10.5e6 + 0.5);

    /* do a binary search: */
    do{
        OSCCAL = trialValue + step;
 42a:	01 2f       	mov	r16, r17
 42c:	0d 0d       	add	r16, r13
 42e:	01 bf       	out	0x31, r16	; 49
        x = usbMeasureFrameLength();    /* proportional to current real frequency */
 430:	6d de       	rcall	.-806    	; 0x10c <usbMeasureFrameLength>
 432:	ec 01       	movw	r28, r24
        if(x < targetValue)             /* frequency still too low */
 434:	8f 38       	cpi	r24, 0x8F	; 143
 436:	91 05       	cpc	r25, r1
 438:	0c f4       	brge	.+2      	; 0x43c <usbEventResetReady+0x2e>
            trialValue += step;
 43a:	d0 2e       	mov	r13, r16
        step >>= 1;
 43c:	16 95       	lsr	r17
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	e8 1a       	sub	r14, r24
 442:	f1 08       	sbc	r15, r1
    }while(step > 0);
 444:	91 f7       	brne	.-28     	; 0x42a <usbEventResetReady+0x1c>
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	8d 0d       	add	r24, r13
 44a:	81 bf       	out	0x31, r24	; 49
 44c:	81 b7       	in	r24, 0x31	; 49
 44e:	0d 2d       	mov	r16, r13
 450:	10 e0       	ldi	r17, 0x00	; 0
 452:	0f 5f       	subi	r16, 0xFF	; 255
 454:	1f 4f       	sbci	r17, 0xFF	; 255
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	08 17       	cp	r16, r24
 45a:	19 07       	cpc	r17, r25
 45c:	b4 f0       	brlt	.+44     	; 0x48a <usbEventResetReady+0x7c>
        x = usbMeasureFrameLength() - targetValue;
 45e:	56 de       	rcall	.-852    	; 0x10c <usbMeasureFrameLength>
 460:	8f 58       	subi	r24, 0x8F	; 143
 462:	91 09       	sbc	r25, r1
 464:	9c 01       	movw	r18, r24
 466:	22 f4       	brpl	.+8      	; 0x470 <usbEventResetReady+0x62>
 468:	22 27       	eor	r18, r18
 46a:	33 27       	eor	r19, r19
 46c:	28 1b       	sub	r18, r24
 46e:	39 0b       	sbc	r19, r25
        if(x < 0)
            x = -x;
        if(x < optimumDev){
 470:	2c 17       	cp	r18, r28
 472:	3d 07       	cpc	r19, r29
 474:	14 f4       	brge	.+4      	; 0x47a <usbEventResetReady+0x6c>
            optimumDev = x;
            optimumValue = OSCCAL;
 476:	d1 b6       	in	r13, 0x31	; 49
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
        x = usbMeasureFrameLength() - targetValue;
        if(x < 0)
            x = -x;
        if(x < optimumDev){
            optimumDev = x;
 478:	e9 01       	movw	r28, r18
    }while(step > 0);
    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; /* this is certainly far away from optimum */
    for(OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++){
 47a:	91 b7       	in	r25, 0x31	; 49
 47c:	9f 5f       	subi	r25, 0xFF	; 255
 47e:	91 bf       	out	0x31, r25	; 49
 480:	21 b7       	in	r18, 0x31	; 49
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	02 17       	cp	r16, r18
 486:	13 07       	cpc	r17, r19
 488:	54 f7       	brge	.-44     	; 0x45e <usbEventResetReady+0x50>
        if(x < optimumDev){
            optimumDev = x;
            optimumValue = OSCCAL;
        }
    }
    OSCCAL = optimumValue;
 48a:	d1 be       	out	0x31, r13	; 49
    /* Disable interrupts during oscillator calibration since
     * usbMeasureFrameLength() counts CPU cycles.
     */
    cli();
    calibrateOscillator();
    sei();
 48c:	78 94       	sei
    eeprom_write_byte(0, OSCCAL);   /* store the calibrated value in EEPROM */
 48e:	61 b7       	in	r22, 0x31	; 49
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	51 d2       	rcall	.+1186   	; 0x938 <eeprom_write_byte>
}
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	ff 90       	pop	r15
 4a0:	ef 90       	pop	r14
 4a2:	df 90       	pop	r13
 4a4:	08 95       	ret

000004a6 <main>:
int main(void)
{
uchar   i;
uchar   calibrationValue;

    calibrationValue = eeprom_read_byte(0); /* calibration value from last time */
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	3e d2       	rcall	.+1148   	; 0x928 <eeprom_read_byte>
    if(calibrationValue != 0xff){
 4ac:	8f 3f       	cpi	r24, 0xFF	; 255
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <main+0xc>
        OSCCAL = calibrationValue;
 4b0:	81 bf       	out	0x31, r24	; 49
    }
    odDebugInit();
    usbDeviceDisconnect();
 4b2:	b8 9a       	sbi	0x17, 0	; 23
 4b4:	84 e1       	ldi	r24, 0x14	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b6:	e5 ea       	ldi	r30, 0xA5	; 165
 4b8:	fe e0       	ldi	r31, 0x0E	; 14
 4ba:	31 97       	sbiw	r30, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <main+0x14>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <main+0x1a>
 4c0:	00 00       	nop
 4c2:	81 50       	subi	r24, 0x01	; 1
    for(i=0;i<20;i++){  /* 300 ms disconnect */
 4c4:	c1 f7       	brne	.-16     	; 0x4b6 <main+0x10>
        _delay_ms(15);
    }
    usbDeviceConnect();
 4c6:	b8 98       	cbi	0x17, 0	; 23
    DDRB |= 1 << BIT_LED;   /* output for LED */
 4c8:	bc 9a       	sbi	0x17, 4	; 23
    PORTB |= 1 << BIT_KEY;  /* pull-up on key input */
 4ca:	c1 9a       	sbi	0x18, 1	; 24
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 4cc:	9e e0       	ldi	r25, 0x0E	; 14
 4ce:	88 e1       	ldi	r24, 0x18	; 24
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	f8 94       	cli
 4d4:	a8 95       	wdr
 4d6:	81 bd       	out	0x21, r24	; 33
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	91 bd       	out	0x21, r25	; 33

/* ------------------------------------------------------------------------- */

static void timerInit(void)
{
    TCCR1 = 0x0b;           /* select clock: 16.5M/1k -> overflow rate = 16.5M/256k = 62.94 Hz */
 4dc:	8b e0       	ldi	r24, 0x0B	; 11
 4de:	80 bf       	out	0x30, r24	; 48
}

static void adcInit(void)
{
    ADMUX = UTIL_BIN8(1001, 0011);  /* Vref=2.56V, measure ADC0 */
 4e0:	83 e9       	ldi	r24, 0x93	; 147
 4e2:	87 b9       	out	0x07, r24	; 7
    ADCSRA = UTIL_BIN8(1000, 0111); /* enable ADC, not free running, interrupt disable, rate = 1/128 */
 4e4:	87 e8       	ldi	r24, 0x87	; 135
 4e6:	86 b9       	out	0x06, r24	; 6
    DDRB |= 1 << BIT_LED;   /* output for LED */
    PORTB |= 1 << BIT_KEY;  /* pull-up on key input */
    wdt_enable(WDTO_1S);
    timerInit();
    adcInit();
    usbInit();
 4e8:	fe d1       	rcall	.+1020   	; 0x8e6 <usbInit>
    sei();
 4ea:	78 94       	sei
    for(;;){    /* main event loop */
        wdt_reset();
        usbPoll();
        if(usbInterruptIsReady() && nextDigit != NULL){ /* we can send another key */
 4ec:	08 e8       	ldi	r16, 0x88	; 136
 4ee:	10 e0       	ldi	r17, 0x00	; 0
static void timerPoll(void)
{
static uchar timerCnt;

    if(TIFR & (1 << TOV1)){
        TIFR = (1 << TOV1); /* clear overflow */
 4f0:	68 94       	set
 4f2:	88 24       	eor	r8, r8
 4f4:	82 f8       	bld	r8, 2
        keyPoll();
        if(++timerCnt >= 63){       /* ~ 1 second interval */
            timerCnt = 0;
            if(isRecording){
                adcPending = 1;
 4f6:	77 24       	eor	r7, r7
 4f8:	73 94       	inc	r7
{
uchar   digit;

    value += value + (value >> 1);  /* value = value * 2.5 for output in mV */
    nextDigit = &valueBuffer[sizeof(valueBuffer)];
    *--nextDigit = 0xff;/* terminate with 0xff */
 4fa:	0f 2e       	mov	r0, r31
 4fc:	f6 e6       	ldi	r31, 0x66	; 102
 4fe:	ef 2e       	mov	r14, r31
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	ff 2e       	mov	r15, r31
 504:	f0 2d       	mov	r31, r0
 506:	55 24       	eor	r5, r5
 508:	5a 94       	dec	r5
    *--nextDigit = 0;
    *--nextDigit = KEY_RETURN;
 50a:	0f 2e       	mov	r0, r31
 50c:	f8 e2       	ldi	r31, 0x28	; 40
 50e:	6f 2e       	mov	r6, r31
 510:	f0 2d       	mov	r31, r0
 512:	0f 2e       	mov	r0, r31
 514:	f2 e7       	ldi	r31, 0x72	; 114
 516:	af 2e       	mov	r10, r31
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	bf 2e       	mov	r11, r31
 51c:	f0 2d       	mov	r31, r0
 51e:	0f 2e       	mov	r0, r31
 520:	f1 e7       	ldi	r31, 0x71	; 113
 522:	cf 2e       	mov	r12, r31
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	df 2e       	mov	r13, r31
 528:	f0 2d       	mov	r31, r0
    do{
        digit = value % 10;
 52a:	0f 2e       	mov	r0, r31
 52c:	fa e0       	ldi	r31, 0x0A	; 10
 52e:	2f 2e       	mov	r2, r31
 530:	31 2c       	mov	r3, r1
 532:	f0 2d       	mov	r31, r0
        value /= 10;
        *--nextDigit = 0;
        if(digit == 0){
            *--nextDigit = KEY_0;
 534:	0f 2e       	mov	r0, r31
 536:	f7 e2       	ldi	r31, 0x27	; 39
 538:	9f 2e       	mov	r9, r31
 53a:	f0 2d       	mov	r31, r0
    timerInit();
    adcInit();
    usbInit();
    sei();
    for(;;){    /* main event loop */
        wdt_reset();
 53c:	a8 95       	wdr
        usbPoll();
 53e:	9f d0       	rcall	.+318    	; 0x67e <usbPoll>
        if(usbInterruptIsReady() && nextDigit != NULL){ /* we can send another key */
 540:	f8 01       	movw	r30, r16
 542:	80 81       	ld	r24, Z
 544:	84 ff       	sbrs	r24, 4
 546:	1c c0       	rjmp	.+56     	; 0x580 <main+0xda>
 548:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <nextDigit>
 54c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <nextDigit+0x1>
 550:	89 2b       	or	r24, r25
 552:	b1 f0       	breq	.+44     	; 0x580 <main+0xda>
            buildReport();
 554:	28 df       	rcall	.-432    	; 0x3a6 <buildReport>
            usbSetInterrupt(reportBuffer, sizeof(reportBuffer));
 556:	62 e0       	ldi	r22, 0x02	; 2
 558:	89 e7       	ldi	r24, 0x79	; 121
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	6e d0       	rcall	.+220    	; 0x63a <usbSetInterrupt>
            if(*++nextDigit == 0xff)    /* this was terminator character */
 55e:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <nextDigit>
 562:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <nextDigit+0x1>
 566:	cf 01       	movw	r24, r30
 568:	01 96       	adiw	r24, 0x01	; 1
 56a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <nextDigit+0x1>
 56e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <nextDigit>
 572:	81 81       	ldd	r24, Z+1	; 0x01
 574:	8f 3f       	cpi	r24, 0xFF	; 255
 576:	21 f4       	brne	.+8      	; 0x580 <main+0xda>
                nextDigit = NULL;
 578:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <nextDigit+0x1>
 57c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <nextDigit>

static void timerPoll(void)
{
static uchar timerCnt;

    if(TIFR & (1 << TOV1)){
 580:	08 b6       	in	r0, 0x38	; 56
 582:	02 fe       	sbrs	r0, 2
 584:	28 c0       	rjmp	.+80     	; 0x5d6 <main+0x130>
        TIFR = (1 << TOV1); /* clear overflow */
 586:	88 be       	out	0x38, r8	; 56
static void keyPoll(void)
{
static uchar    keyMirror;
uchar           key;

    key = PINB & (1 << BIT_KEY);
 588:	86 b3       	in	r24, 0x16	; 22
 58a:	82 70       	andi	r24, 0x02	; 2
    if(keyMirror != key){   /* status changed */
 58c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
 590:	89 17       	cp	r24, r25
 592:	81 f0       	breq	.+32     	; 0x5b4 <main+0x10e>
        keyMirror = key;
 594:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
        if(!key){           /* key was pressed */
 598:	81 11       	cpse	r24, r1
 59a:	0c c0       	rjmp	.+24     	; 0x5b4 <main+0x10e>
            setIsRecording(!isRecording);
 59c:	87 2d       	mov	r24, r7
 59e:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <isRecording>
 5a2:	91 11       	cpse	r25, r1
 5a4:	80 e0       	ldi	r24, 0x00	; 0

/* ------------------------------------------------------------------------- */

static void setIsRecording(uchar newValue)
{
    isRecording = newValue;
 5a6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <isRecording>
    if(isRecording){
 5aa:	88 23       	and	r24, r24
 5ac:	11 f0       	breq	.+4      	; 0x5b2 <main+0x10c>
        PORTB |= 1 << BIT_LED;      /* LED on */
 5ae:	c4 9a       	sbi	0x18, 4	; 24
 5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <main+0x10e>
    }else{
        PORTB &= ~(1 << BIT_LED);   /* LED off */
 5b2:	c4 98       	cbi	0x18, 4	; 24
static uchar timerCnt;

    if(TIFR & (1 << TOV1)){
        TIFR = (1 << TOV1); /* clear overflow */
        keyPoll();
        if(++timerCnt >= 63){       /* ~ 1 second interval */
 5b4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <timerCnt.1901>
 5b8:	8f 5f       	subi	r24, 0xFF	; 255
 5ba:	8f 33       	cpi	r24, 0x3F	; 63
 5bc:	18 f4       	brcc	.+6      	; 0x5c4 <main+0x11e>
 5be:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <timerCnt.1901>
 5c2:	09 c0       	rjmp	.+18     	; 0x5d6 <main+0x130>
            timerCnt = 0;
 5c4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <timerCnt.1901>
            if(isRecording){
 5c8:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <isRecording>
 5cc:	88 23       	and	r24, r24
 5ce:	19 f0       	breq	.+6      	; 0x5d6 <main+0x130>
                adcPending = 1;
 5d0:	70 92 77 00 	sts	0x0077, r7	; 0x800077 <adcPending>
                ADCSRA |= (1 << ADSC);  /* start next conversion */
 5d4:	36 9a       	sbi	0x06, 6	; 6
    }
}

static void adcPoll(void)
{
    if(adcPending && !(ADCSRA & (1 << ADSC))){
 5d6:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <adcPending>
 5da:	88 23       	and	r24, r24
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <main+0x13a>
 5de:	ae cf       	rjmp	.-164    	; 0x53c <main+0x96>
 5e0:	36 99       	sbic	0x06, 6	; 6
 5e2:	ac cf       	rjmp	.-168    	; 0x53c <main+0x96>
        adcPending = 0;
 5e4:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <adcPending>
        evaluateADC(ADC);
 5e8:	24 b1       	in	r18, 0x04	; 4
 5ea:	35 b1       	in	r19, 0x05	; 5
 5ec:	a9 01       	movw	r20, r18
 5ee:	44 0f       	add	r20, r20
 5f0:	55 1f       	adc	r21, r21

static void evaluateADC(unsigned int value)
{
uchar   digit;

    value += value + (value >> 1);  /* value = value * 2.5 for output in mV */
 5f2:	36 95       	lsr	r19
 5f4:	27 95       	ror	r18
 5f6:	42 0f       	add	r20, r18
 5f8:	53 1f       	adc	r21, r19
    nextDigit = &valueBuffer[sizeof(valueBuffer)];
    *--nextDigit = 0xff;/* terminate with 0xff */
 5fa:	f7 01       	movw	r30, r14
 5fc:	57 86       	std	Z+15, r5	; 0x0f
    *--nextDigit = 0;
 5fe:	16 86       	std	Z+14, r1	; 0x0e
    *--nextDigit = KEY_RETURN;
 600:	65 86       	std	Z+13, r6	; 0x0d
 602:	e5 01       	movw	r28, r10
 604:	f6 01       	movw	r30, r12
    do{
        digit = value % 10;
 606:	ca 01       	movw	r24, r20
 608:	b1 01       	movw	r22, r2
 60a:	7a d1       	rcall	.+756    	; 0x900 <__udivmodhi4>
        value /= 10;
 60c:	46 2f       	mov	r20, r22
 60e:	57 2f       	mov	r21, r23
        *--nextDigit = 0;
 610:	18 82       	st	Y, r1
        if(digit == 0){
 612:	81 11       	cpse	r24, r1
 614:	04 c0       	rjmp	.+8      	; 0x61e <main+0x178>
            *--nextDigit = KEY_0;
 616:	6e 2f       	mov	r22, r30
 618:	9f 2f       	mov	r25, r31
 61a:	90 82       	st	Z, r9
 61c:	04 c0       	rjmp	.+8      	; 0x626 <main+0x180>
        }else{
            *--nextDigit = KEY_1 - 1 + digit;
 61e:	6e 2f       	mov	r22, r30
 620:	9f 2f       	mov	r25, r31
 622:	83 5e       	subi	r24, 0xE3	; 227
 624:	80 83       	st	Z, r24
 626:	22 97       	sbiw	r28, 0x02	; 2
 628:	32 97       	sbiw	r30, 0x02	; 2
        }
    }while(value != 0);
 62a:	41 15       	cp	r20, r1
 62c:	51 05       	cpc	r21, r1
 62e:	59 f7       	brne	.-42     	; 0x606 <main+0x160>
 630:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <nextDigit>
 634:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <nextDigit+0x1>
 638:	81 cf       	rjmp	.-254    	; 0x53c <main+0x96>

0000063a <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 63a:	cf 93       	push	r28
 63c:	c6 2f       	mov	r28, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 63e:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <usbTxStatus1>
 642:	24 ff       	sbrs	r18, 4
 644:	07 c0       	rjmp	.+14     	; 0x654 <usbSetInterrupt+0x1a>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 646:	e8 e8       	ldi	r30, 0x88	; 136
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	31 81       	ldd	r19, Z+1	; 0x01
 64c:	28 e8       	ldi	r18, 0x88	; 136
 64e:	23 27       	eor	r18, r19
 650:	21 83       	std	Z+1, r18	; 0x01
 652:	03 c0       	rjmp	.+6      	; 0x65a <usbSetInterrupt+0x20>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 654:	2a e5       	ldi	r18, 0x5A	; 90
 656:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <usbTxStatus1>
 65a:	e8 2f       	mov	r30, r24
 65c:	f9 2f       	mov	r31, r25
 65e:	aa e8       	ldi	r26, 0x8A	; 138
 660:	b0 e0       	ldi	r27, 0x00	; 0
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 662:	8c 2f       	mov	r24, r28
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 664:	91 91       	ld	r25, Z+
 666:	9d 93       	st	X+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 668:	81 50       	subi	r24, 0x01	; 1
 66a:	e1 f7       	brne	.-8      	; 0x664 <usbSetInterrupt+0x2a>
    usbCrc16Append(&txStatus->buffer[1], len);
 66c:	6c 2f       	mov	r22, r28
 66e:	8a e8       	ldi	r24, 0x8A	; 138
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	48 dd       	rcall	.-1392   	; 0x104 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 674:	cc 5f       	subi	r28, 0xFC	; 252
 676:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <usbTxStatus1>
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 67a:	cf 91       	pop	r28
 67c:	08 95       	ret

0000067e <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 682:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <usbRxLen>
 686:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
 688:	0a f4       	brpl	.+2      	; 0x68c <usbPoll+0xe>
 68a:	b4 c0       	rjmp	.+360    	; 0x7f4 <usbPoll+0x176>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 68c:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <usbInputBufOffset>
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 690:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <usbRxToken>
 694:	9d 32       	cpi	r25, 0x2D	; 45
 696:	09 f0       	breq	.+2      	; 0x69a <usbPoll+0x1c>
 698:	ab c0       	rjmp	.+342    	; 0x7f0 <usbPoll+0x172>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 69a:	88 30       	cpi	r24, 0x08	; 8
 69c:	09 f0       	breq	.+2      	; 0x6a0 <usbPoll+0x22>
 69e:	a8 c0       	rjmp	.+336    	; 0x7f0 <usbPoll+0x172>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 6a0:	cc e0       	ldi	r28, 0x0C	; 12
 6a2:	d0 e0       	ldi	r29, 0x00	; 0
 6a4:	c2 1b       	sub	r28, r18
 6a6:	d1 09       	sbc	r29, r1
 6a8:	c3 56       	subi	r28, 0x63	; 99
 6aa:	df 4f       	sbci	r29, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 6ac:	83 ec       	ldi	r24, 0xC3	; 195
 6ae:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 6b2:	8a e5       	ldi	r24, 0x5A	; 90
 6b4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbTxLen>
        usbMsgFlags = 0;
 6b8:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 6bc:	88 81       	ld	r24, Y
 6be:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 6c0:	19 f0       	breq	.+6      	; 0x6c8 <usbPoll+0x4a>
            replyLen = usbFunctionSetup(data);
 6c2:	ce 01       	movw	r24, r28
 6c4:	7e de       	rcall	.-772    	; 0x3c2 <usbFunctionSetup>
 6c6:	8b c0       	rjmp	.+278    	; 0x7de <usbPoll+0x160>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 6c8:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 6ca:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
 6ce:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 6d0:	81 11       	cpse	r24, r1
 6d2:	06 c0       	rjmp	.+12     	; 0x6e0 <usbPoll+0x62>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 6d4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 6d8:	26 e8       	ldi	r18, 0x86	; 134
 6da:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 6dc:	82 e0       	ldi	r24, 0x02	; 2
 6de:	7b c0       	rjmp	.+246    	; 0x7d6 <usbPoll+0x158>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 6e0:	85 30       	cpi	r24, 0x05	; 5
 6e2:	31 f4       	brne	.+12     	; 0x6f0 <usbPoll+0x72>
        usbNewDeviceAddr = value;
 6e4:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <usbNewDeviceAddr>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 6e8:	26 e8       	ldi	r18, 0x86	; 134
 6ea:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	73 c0       	rjmp	.+230    	; 0x7d6 <usbPoll+0x158>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 6f0:	86 30       	cpi	r24, 0x06	; 6
 6f2:	09 f0       	breq	.+2      	; 0x6f6 <usbPoll+0x78>
 6f4:	50 c0       	rjmp	.+160    	; 0x796 <usbPoll+0x118>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 6f6:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 6f8:	81 30       	cpi	r24, 0x01	; 1
 6fa:	41 f4       	brne	.+16     	; 0x70c <usbPoll+0x8e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 6fc:	83 e6       	ldi	r24, 0x63	; 99
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <usbMsgPtr+0x1>
 704:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <usbMsgPtr>
 708:	82 e1       	ldi	r24, 0x12	; 18
 70a:	41 c0       	rjmp	.+130    	; 0x78e <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 70c:	82 30       	cpi	r24, 0x02	; 2
 70e:	41 f4       	brne	.+16     	; 0x720 <usbPoll+0xa2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 710:	81 e4       	ldi	r24, 0x41	; 65
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <usbMsgPtr+0x1>
 718:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <usbMsgPtr>
 71c:	82 e2       	ldi	r24, 0x22	; 34
 71e:	37 c0       	rjmp	.+110    	; 0x78e <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 720:	83 30       	cpi	r24, 0x03	; 3
 722:	f1 f4       	brne	.+60     	; 0x760 <usbPoll+0xe2>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 724:	91 11       	cpse	r25, r1
 726:	08 c0       	rjmp	.+16     	; 0x738 <usbPoll+0xba>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 728:	8d e9       	ldi	r24, 0x9D	; 157
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <usbMsgPtr+0x1>
 730:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <usbMsgPtr>
 734:	84 e0       	ldi	r24, 0x04	; 4
 736:	2b c0       	rjmp	.+86     	; 0x78e <usbPoll+0x110>
        SWITCH_CASE(1)
 738:	91 30       	cpi	r25, 0x01	; 1
 73a:	41 f4       	brne	.+16     	; 0x74c <usbPoll+0xce>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 73c:	8b e8       	ldi	r24, 0x8B	; 139
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <usbMsgPtr+0x1>
 744:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <usbMsgPtr>
 748:	82 e1       	ldi	r24, 0x12	; 18
 74a:	21 c0       	rjmp	.+66     	; 0x78e <usbPoll+0x110>
        SWITCH_CASE(2)
 74c:	92 30       	cpi	r25, 0x02	; 2
 74e:	e1 f4       	brne	.+56     	; 0x788 <usbPoll+0x10a>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 750:	85 e7       	ldi	r24, 0x75	; 117
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <usbMsgPtr+0x1>
 758:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <usbMsgPtr>
 75c:	86 e1       	ldi	r24, 0x16	; 22
 75e:	17 c0       	rjmp	.+46     	; 0x78e <usbPoll+0x110>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 760:	81 32       	cpi	r24, 0x21	; 33
 762:	41 f4       	brne	.+16     	; 0x774 <usbPoll+0xf6>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 764:	83 e5       	ldi	r24, 0x53	; 83
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <usbMsgPtr+0x1>
 76c:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <usbMsgPtr>
 770:	89 e0       	ldi	r24, 0x09	; 9
 772:	0d c0       	rjmp	.+26     	; 0x78e <usbPoll+0x110>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 774:	82 32       	cpi	r24, 0x22	; 34
 776:	51 f4       	brne	.+20     	; 0x78c <usbPoll+0x10e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 778:	8e e1       	ldi	r24, 0x1E	; 30
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <usbMsgPtr+0x1>
 780:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <usbMsgPtr>
 784:	83 e2       	ldi	r24, 0x23	; 35
 786:	03 c0       	rjmp	.+6      	; 0x78e <usbPoll+0x110>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	01 c0       	rjmp	.+2      	; 0x78e <usbPoll+0x110>
 78c:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 78e:	90 e4       	ldi	r25, 0x40	; 64
 790:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <usbMsgFlags>
 794:	24 c0       	rjmp	.+72     	; 0x7de <usbPoll+0x160>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 796:	88 30       	cpi	r24, 0x08	; 8
 798:	99 f0       	breq	.+38     	; 0x7c0 <usbPoll+0x142>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 79a:	89 30       	cpi	r24, 0x09	; 9
 79c:	31 f4       	brne	.+12     	; 0x7aa <usbPoll+0x12c>
        usbConfiguration = value;
 79e:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <usbConfiguration>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 7a2:	26 e8       	ldi	r18, 0x86	; 134
 7a4:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	16 c0       	rjmp	.+44     	; 0x7d6 <usbPoll+0x158>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 7aa:	8a 30       	cpi	r24, 0x0A	; 10
 7ac:	69 f0       	breq	.+26     	; 0x7c8 <usbPoll+0x14a>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 7ae:	8b 30       	cpi	r24, 0x0B	; 11
 7b0:	79 f4       	brne	.+30     	; 0x7d0 <usbPoll+0x152>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 7b2:	8b e4       	ldi	r24, 0x4B	; 75
 7b4:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <usbTxStatus1+0x1>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 7b8:	26 e8       	ldi	r18, 0x86	; 134
 7ba:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 7bc:	80 e0       	ldi	r24, 0x00	; 0
 7be:	0b c0       	rjmp	.+22     	; 0x7d6 <usbPoll+0x158>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 7c0:	2c e9       	ldi	r18, 0x9C	; 156
 7c2:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	07 c0       	rjmp	.+14     	; 0x7d6 <usbPoll+0x158>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 7c8:	26 e8       	ldi	r18, 0x86	; 134
 7ca:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <usbPoll+0x158>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 7d0:	26 e8       	ldi	r18, 0x86	; 134
 7d2:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 7d4:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 7d6:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <usbMsgPtr+0x1>
 7da:	20 93 97 00 	sts	0x0097, r18	; 0x800097 <usbMsgPtr>
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 7de:	9f 81       	ldd	r25, Y+7	; 0x07
 7e0:	91 11       	cpse	r25, r1
 7e2:	04 c0       	rjmp	.+8      	; 0x7ec <usbPoll+0x16e>
 7e4:	9e 81       	ldd	r25, Y+6	; 0x06
 7e6:	98 17       	cp	r25, r24
 7e8:	08 f4       	brcc	.+2      	; 0x7ec <usbPoll+0x16e>
 7ea:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 7ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 7f0:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 7f4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <usbTxLen>
 7f8:	84 ff       	sbrs	r24, 4
 7fa:	4b c0       	rjmp	.+150    	; 0x892 <usbPoll+0x214>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 7fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 800:	8f 3f       	cpi	r24, 0xFF	; 255
 802:	09 f4       	brne	.+2      	; 0x806 <usbPoll+0x188>
 804:	46 c0       	rjmp	.+140    	; 0x892 <usbPoll+0x214>
 806:	c8 2f       	mov	r28, r24
 808:	89 30       	cpi	r24, 0x09	; 9
 80a:	08 f0       	brcs	.+2      	; 0x80e <usbPoll+0x190>
 80c:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 80e:	8c 1b       	sub	r24, r28
 810:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 814:	ed e7       	ldi	r30, 0x7D	; 125
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	90 81       	ld	r25, Z
 81a:	88 e8       	ldi	r24, 0x88	; 136
 81c:	89 27       	eor	r24, r25
 81e:	80 83       	st	Z, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 820:	cc 23       	and	r28, r28
 822:	09 f4       	brne	.+2      	; 0x826 <usbPoll+0x1a8>
 824:	57 c0       	rjmp	.+174    	; 0x8d4 <usbPoll+0x256>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 826:	20 91 97 00 	lds	r18, 0x0097	; 0x800097 <usbMsgPtr>
 82a:	30 91 98 00 	lds	r19, 0x0098	; 0x800098 <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 82e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <usbMsgFlags>
 832:	86 ff       	sbrs	r24, 6
 834:	10 c0       	rjmp	.+32     	; 0x856 <usbPoll+0x1d8>
 836:	ae e7       	ldi	r26, 0x7E	; 126
 838:	b0 e0       	ldi	r27, 0x00	; 0
 83a:	f9 01       	movw	r30, r18
 83c:	8c 2f       	mov	r24, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 83e:	94 91       	lpm	r25, Z
                    *data++ = c;
 840:	9d 93       	st	X+, r25
                    r++;
 842:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 844:	81 50       	subi	r24, 0x01	; 1
 846:	d9 f7       	brne	.-10     	; 0x83e <usbPoll+0x1c0>
 848:	8f ef       	ldi	r24, 0xFF	; 255
 84a:	8c 0f       	add	r24, r28
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	01 96       	adiw	r24, 0x01	; 1
 850:	28 0f       	add	r18, r24
 852:	39 1f       	adc	r19, r25
 854:	0e c0       	rjmp	.+28     	; 0x872 <usbPoll+0x1f4>
 856:	d9 01       	movw	r26, r18
 858:	ee e7       	ldi	r30, 0x7E	; 126
 85a:	f0 e0       	ldi	r31, 0x00	; 0
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 85c:	8c 2f       	mov	r24, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 85e:	9d 91       	ld	r25, X+
 860:	91 93       	st	Z+, r25
                    r++;
                }while(--i);
 862:	81 50       	subi	r24, 0x01	; 1
 864:	e1 f7       	brne	.-8      	; 0x85e <usbPoll+0x1e0>
 866:	8f ef       	ldi	r24, 0xFF	; 255
 868:	8c 0f       	add	r24, r28
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	01 96       	adiw	r24, 0x01	; 1
 86e:	28 0f       	add	r18, r24
 870:	39 1f       	adc	r19, r25
            }
            usbMsgPtr = r;
 872:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <usbMsgPtr+0x1>
 876:	20 93 97 00 	sts	0x0097, r18	; 0x800097 <usbMsgPtr>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 87a:	6c 2f       	mov	r22, r28
 87c:	8e e7       	ldi	r24, 0x7E	; 126
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	41 dc       	rcall	.-1918   	; 0x104 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 882:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 884:	cc 30       	cpi	r28, 0x0C	; 12
 886:	18 f4       	brcc	.+6      	; 0x88e <usbPoll+0x210>
            usbMsgLen = USB_NO_MSG;
 888:	8f ef       	ldi	r24, 0xFF	; 255
 88a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 88e:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <usbTxLen>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 892:	86 b3       	in	r24, 0x16	; 22
 894:	85 70       	andi	r24, 0x05	; 5
        if(usbLineStatus != 0)  /* SE0 has ended */
 896:	a9 f4       	brne	.+42     	; 0x8c2 <usbPoll+0x244>
 898:	93 e1       	ldi	r25, 0x13	; 19
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 89a:	86 b3       	in	r24, 0x16	; 22
 89c:	85 70       	andi	r24, 0x05	; 5
        if(usbLineStatus != 0)  /* SE0 has ended */
 89e:	91 f4       	brne	.+36     	; 0x8c4 <usbPoll+0x246>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 8a0:	91 50       	subi	r25, 0x01	; 1
 8a2:	d9 f7       	brne	.-10     	; 0x89a <usbPoll+0x21c>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 8a4:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <usbNewDeviceAddr>
    usbDeviceAddr = 0;
 8a8:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <usbDeviceAddr>
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;

    if(wasReset != isReset){
 8ac:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <wasReset.1772>
 8b0:	81 30       	cpi	r24, 0x01	; 1
 8b2:	19 f4       	brne	.+6      	; 0x8ba <usbPoll+0x23c>
 8b4:	15 c0       	rjmp	.+42     	; 0x8e0 <usbPoll+0x262>
        USB_RESET_HOOK(isReset);
 8b6:	ab dd       	rcall	.-1194   	; 0x40e <usbEventResetReady>
 8b8:	01 c0       	rjmp	.+2      	; 0x8bc <usbPoll+0x23e>

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
 8ba:	c1 e0       	ldi	r28, 0x01	; 1

    if(wasReset != isReset){
        USB_RESET_HOOK(isReset);
        wasReset = isReset;
 8bc:	c0 93 7b 00 	sts	0x007B, r28	; 0x80007b <wasReset.1772>
 8c0:	0f c0       	rjmp	.+30     	; 0x8e0 <usbPoll+0x262>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 8c2:	94 e1       	ldi	r25, 0x14	; 20

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
 8c4:	c1 e0       	ldi	r28, 0x01	; 1
 8c6:	91 11       	cpse	r25, r1
 8c8:	c0 e0       	ldi	r28, 0x00	; 0

    if(wasReset != isReset){
 8ca:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <wasReset.1772>
 8ce:	c8 13       	cpse	r28, r24
 8d0:	f2 cf       	rjmp	.-28     	; 0x8b6 <usbPoll+0x238>
 8d2:	06 c0       	rjmp	.+12     	; 0x8e0 <usbPoll+0x262>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 8d4:	6c 2f       	mov	r22, r28
 8d6:	8e e7       	ldi	r24, 0x7E	; 126
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	14 dc       	rcall	.-2008   	; 0x104 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 8dc:	cc 5f       	subi	r28, 0xFC	; 252
 8de:	d4 cf       	rjmp	.-88     	; 0x888 <usbPoll+0x20a>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 8e0:	df 91       	pop	r29
 8e2:	cf 91       	pop	r28
 8e4:	08 95       	ret

000008e6 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 8e6:	85 b7       	in	r24, 0x35	; 53
 8e8:	83 60       	ori	r24, 0x03	; 3
 8ea:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 8ec:	8b b7       	in	r24, 0x3b	; 59
 8ee:	80 64       	ori	r24, 0x40	; 64
 8f0:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 8f2:	e8 e8       	ldi	r30, 0x88	; 136
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	8b e4       	ldi	r24, 0x4B	; 75
 8f8:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 8fa:	8a e5       	ldi	r24, 0x5A	; 90
 8fc:	80 83       	st	Z, r24
 8fe:	08 95       	ret

00000900 <__udivmodhi4>:
 900:	aa 1b       	sub	r26, r26
 902:	bb 1b       	sub	r27, r27
 904:	51 e1       	ldi	r21, 0x11	; 17
 906:	07 c0       	rjmp	.+14     	; 0x916 <__udivmodhi4_ep>

00000908 <__udivmodhi4_loop>:
 908:	aa 1f       	adc	r26, r26
 90a:	bb 1f       	adc	r27, r27
 90c:	a6 17       	cp	r26, r22
 90e:	b7 07       	cpc	r27, r23
 910:	10 f0       	brcs	.+4      	; 0x916 <__udivmodhi4_ep>
 912:	a6 1b       	sub	r26, r22
 914:	b7 0b       	sbc	r27, r23

00000916 <__udivmodhi4_ep>:
 916:	88 1f       	adc	r24, r24
 918:	99 1f       	adc	r25, r25
 91a:	5a 95       	dec	r21
 91c:	a9 f7       	brne	.-22     	; 0x908 <__udivmodhi4_loop>
 91e:	80 95       	com	r24
 920:	90 95       	com	r25
 922:	bc 01       	movw	r22, r24
 924:	cd 01       	movw	r24, r26
 926:	08 95       	ret

00000928 <eeprom_read_byte>:
 928:	e1 99       	sbic	0x1c, 1	; 28
 92a:	fe cf       	rjmp	.-4      	; 0x928 <eeprom_read_byte>
 92c:	1f ba       	out	0x1f, r1	; 31
 92e:	8e bb       	out	0x1e, r24	; 30
 930:	e0 9a       	sbi	0x1c, 0	; 28
 932:	99 27       	eor	r25, r25
 934:	8d b3       	in	r24, 0x1d	; 29
 936:	08 95       	ret

00000938 <eeprom_write_byte>:
 938:	26 2f       	mov	r18, r22

0000093a <eeprom_write_r18>:
 93a:	e1 99       	sbic	0x1c, 1	; 28
 93c:	fe cf       	rjmp	.-4      	; 0x93a <eeprom_write_r18>
 93e:	1c ba       	out	0x1c, r1	; 28
 940:	1f ba       	out	0x1f, r1	; 31
 942:	8e bb       	out	0x1e, r24	; 30
 944:	2d bb       	out	0x1d, r18	; 29
 946:	0f b6       	in	r0, 0x3f	; 63
 948:	f8 94       	cli
 94a:	e2 9a       	sbi	0x1c, 2	; 28
 94c:	e1 9a       	sbi	0x1c, 1	; 28
 94e:	0f be       	out	0x3f, r0	; 63
 950:	01 96       	adiw	r24, 0x01	; 1
 952:	08 95       	ret

00000954 <_exit>:
 954:	f8 94       	cli

00000956 <__stop_program>:
 956:	ff cf       	rjmp	.-2      	; 0x956 <__stop_program>
